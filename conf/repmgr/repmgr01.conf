node_id = 1
node_name = 'pg1'
# Connection information
conninfo='host=pg1 port=5432 user=repmgr dbname=repmgr connect_timeout=2'
# File paths and directories
data_directory = '/home/postgres/data/pg15'
replication_user='repmgr'
repmgr_bindir = '/usr/local/pg15/bin'
pg_bindir = '/usr/local/pg15/bin'

# 日志管理
log_level=INFO
log_file='/home/postgres/data/repmgr/repmgrd.log'
log_status_interval=10

# pg、repmgr服务管理命令
service_start_command='/usr/local/pg15/bin/pg_ctl -D /home/postgres/data/pg15 start -o \'-c config_file=/home/postgres/data/pg15/postgresql.conf\' -l /home/postgres/data/pglog/start.log'
service_stop_command='/usr/local/pg15/bin/pg_ctl stop'
service_restart_command='/usr/local/pg15/bin/pg_ctl -D /home/postgres/data/pg15 restart -o \'-c config_file=/home/postgres/data/pg15/postgresql.conf\' -l /home/postgres/data/pglog/start.log'
service_reload_command='su - postgres -c \'/usr/local/pg15/bin/pg_ctl reload\' '
repmgrd_pid_file='/tmp/repmgrd.pid'              # repmgrd 运行时的 pid 文件
repmgrd_service_start_command='/usr/local/pg15/bin/repmgr -f /home/postgres/repmgr.conf start'
repmgrd_service_stop_command='kill -9 `cat /tmp/repmgrd.pid`'
# failover设置
failover='automatic'
promote_command='/usr/local/pg15/bin/repmgr -f /home/postgres/repmgr.conf standby promote  --log-to-file'        #当 repmgrd 确>定当前节点将成为新的主节点时 ，将在故障转移情况下执行 promote_command 中定义的程序或脚本
follow_command='/usr/local/pg15/bin/repmgr -f /home/postgres/repmgr.conf  standby follow --log-to-file --upstream-node-id=%n'        # %n将被替换 repmgrd与新的主节点的ID， 如果没有提供， repmgr standby follow将尝试自行确定新的主repmgr standby follow节点，

# 高可用参数设置
location='location1'                # 定义节点位置的任意字符串,在故障转移期间用于检查当前主节点的可见性
priority=100                      # 节点优先级，选主时可能使用到。（lsn > priority > node_id）
# 0 代表该节点不会被提升为主节点
monitoring_history=yes              # 是否将监控数据写入“monitoring_history”表
reconnect_interval=10               # 故障转移之前，尝试重新连接的间隔（以秒为单位）
reconnect_attempts=6                # 故障转移之前，尝试重新连接的次数
connection_check_type=ping          # ping: repmg 使用PQPing() 方法测试连接
# connection: 尝试与节点建立新的连接
# query: 通过现有连接在节点上执行 SQL 语句
monitor_interval_secs=5             # 写入监控数据的间隔
use_replication_slots=true

